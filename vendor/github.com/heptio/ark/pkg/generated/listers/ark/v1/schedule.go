// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/heptio/ark/pkg/apis/ark/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduleLister helps list Schedules.
type ScheduleLister interface {
	// List lists all Schedules in the indexer.
	List(selector labels.Selector) (ret []*v1.Schedule, err error)
	// Schedules returns an object that can list and get Schedules.
	Schedules(namespace string) ScheduleNamespaceLister
	ScheduleListerExpansion
}

// scheduleLister implements the ScheduleLister interface.
type scheduleLister struct {
	indexer cache.Indexer
}

// NewScheduleLister returns a new ScheduleLister.
func NewScheduleLister(indexer cache.Indexer) ScheduleLister {
	return &scheduleLister{indexer: indexer}
}

// List lists all Schedules in the indexer.
func (s *scheduleLister) List(selector labels.Selector) (ret []*v1.Schedule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Schedule))
	})
	return ret, err
}

// Schedules returns an object that can list and get Schedules.
func (s *scheduleLister) Schedules(namespace string) ScheduleNamespaceLister {
	return scheduleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduleNamespaceLister helps list and get Schedules.
type ScheduleNamespaceLister interface {
	// List lists all Schedules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Schedule, err error)
	// Get retrieves the Schedule from the indexer for a given namespace and name.
	Get(name string) (*v1.Schedule, error)
	ScheduleNamespaceListerExpansion
}

// scheduleNamespaceLister implements the ScheduleNamespaceLister
// interface.
type scheduleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Schedules in the indexer for a given namespace.
func (s scheduleNamespaceLister) List(selector labels.Selector) (ret []*v1.Schedule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Schedule))
	})
	return ret, err
}

// Get retrieves the Schedule from the indexer for a given namespace and name.
func (s scheduleNamespaceLister) Get(name string) (*v1.Schedule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("schedule"), name)
	}
	return obj.(*v1.Schedule), nil
}
